HTTP Communication in Angular
~~~~~~~~~~~~~~~~~~~~~~~~~~




Steps
~~~~~
1. Import 	HttpClientModule in App.module.ts
		--- under imports section
		
2. Inject HttpClient service in other items(component,  services,..) in angular application	


	import  {HttpClient}  from '@angular/common/http';

	constructor( private  httpObj:HttpClient )
	{
		
	}


3. Perform operations  using HttpClient methods:

		a.  get()			---			Read
		b.  post()			---			Create
		c.  put()			---			Update
		d. delete()		---			Delete
		
	
	Note: all the above methods returns observable object.
				
				
Usage:
			let url = "";			
			
			this.httpObj.get(url).subscribe( (result:any) => 
			{
					// code to handle the result that comes from server					
			});
		
		
	

Performing CRUD operations (use json-server as backend)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	


>  json-server   --watch  db_depts.json
>  json-server   --watch  --id  deptno    db_depts.json
>  json-server   --watch  --id  Deptno   --port 3500  db_depts.json



	1. Read  All
			let url = "http://localhost:3000/depts";			
			this.httpObj.get(url).subscribe();
			
	2. Read Single Record
			let url = "http://localhost:3000/depts/10";			
			this.httpObj.get(url).subscribe();	
	
	3. Create
			let url = "http://localhost:3000/depts";			
			this.httpObj.post(url,  dataObj).subscribe();
			
	4.  Update			
				let url = "http://localhost:3000/depts/10";			
				this.httpObj.put(url,  dataObj).subscribe();			
		
	5. Delete
			let url = "http://localhost:3000/depts/10";			
			this.httpObj.delete(url).subscribe();		
	 
----------------------------------------------------------------------------------------------------------------


Task
~~~~~

Create Angular component to perform CRUD operations. Use json-server as backend.

	Data:		Empno, Ename, Job, Sal, Deptno


1.  Prepare json file with employee data and start json server
2.  Angular Component -- to do CRUD Operations on Employee data.



-------------------------------------------------------------------------------


	
Processing Typed Objects in Http Calls
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

--->Getting strongly typed responses:	

	  this.httpObj.get<Dept[]>(this.url).subscribe( (response:Dept[]) =>{
          this.deptsArray = response;
     });
	 
	 
	 class Dept
	{
			deptno  : number = 0;
			dname  : string  = "";
			loc  : string  = "";
	}
	
	
	Hint:   We should create a class with same properites of server data in order to get strongly typed data. 
	
--------------------------------------------------------------------------------------------------------------------------	
	
	
	
	
Create Angular Service which uses HttpClient and calls a REST API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


1.  Create Angular Service that communicate with REST API 
2.  Inject  Angular Service in Component
3.  Perform CRUD operations through Angular Service (DataService)

	
	
	
	
	
	
	
	
  getData():Observable<any[]>
  {
      return this.httpObj.get<any[]>(this.url);
  }
  
  
  getDataByJob(job:string):Observable<any[]>
  {
      return this.httpObj.get<any[]>(this.url);
  }
  
  
  
  
  
  a.  filter data after getting response
  
  b.  send job details to server through url
		http://localhost:3000/depts?loc=Hyd
		http://localhost:3000/emps?job=Manager
		
   c.  custom filter 		
   
   d.   separate method at server to hanlde this request
   
		http://localhost:3000/depts/getDeptsByLoc/Hyd
		
--------------------------------------------------------------------------------------------------		


		1.   May be server side implement required no. of methods		
					a. method name
					b. method type (get/post/put/delete)
					
		2.   Process/filter the response at client side 
		
				---- we need to add some more efforts to hanlde the response
		
					

					


Customize the responses using RxJS Operators
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
		
		
1. how to return specific property from the response.
		--- get only employee names   --- Array of Strings
		--- get only dept names   --- Array of Strings
		
		
	 return this.httpObj.get<any[]>(this.url).pipe(
      map(res => {
        return res.map(item => { return item.dname });
    })
    );
		
		
2. how to return specific no. of properties from the response.		

		---   get only  ename, job    ----   Array of Objects
		
		
	 return this.httpObj.get<any[]>(this.url).pipe(
      map(res => {
        return res.map(item => {
          return { 	dname: item.dname, loc : item.loc} });
    })
    );
	
	
		

3.  how to return specific no. of records based on the condition

		---  get employee details based on the job  ---    Array of Objects

		 return this.httpObj.get<any[]>(this.url).pipe(
				map(res => {
					return  res.filter(item => item.loc == 'Hyd');
			})
    );
		
		
 
				
					
						
Tasks
~~~~~


Add the following methods to data serverice that process employee data

	1.  getEmployeeJobs()
	2.  getEmployeesByJob()
	3.  getEnamesAndJobs()